{
  "flashcards": [
    {
      "id": 1,
      "question": "What is a Topic?",
      "answer": "Logical representation for a log of messages as defined by developers. Auto created when first used. No limit to number of topics. Many to many relationship with Producers."
    },
    {
      "id": 2,
      "question": "What are Aggregations?",
      "answer": "Accumulate stream values as new record. Usually windowed. Sum, count, min, max. Stateful."
    },
    {
      "id": 3,
      "question": "What is a Connector Thread?",
      "answer": "Special thread owned by a connector to coordinate jobs."
    },
    {
      "id": 4,
      "question": "What is a Source Connector?",
      "answer": "Reads data from external system to Kafka. Internally uses producer."
    },
    {
      "id": 5,
      "question": "What is Client authentication?",
      "answer": "Enable from applications to brokers. Define which applications can connect. MTLS, SASL, SSL."
    },
    {
      "id": 6,
      "question": "What is buffer.memory?",
      "answer": "Producer's buffer for messages sent to cluster. Increase if producers are sending faster than brokers are acking. Default 32MB. Adjust for: Caching from slow brokers, large batch.size, large message size, topics with large partition counts."
    },
    {
      "id": 7,
      "question": "What are Tasks in Kafka Connect?",
      "answer": "Connector jobs broken into Tasks. Distributed to workers by Connect. Each Task is run in its own thread."
    },
    {
      "id": 8,
      "question": "What is Copartitioning?",
      "answer": "Streams are co-partitioned when they have the same number of partitions and same partitioning strategy."
    },
    {
      "id": 9,
      "question": "What are Connectors?",
      "answer": "Kafka Connect plugins. Can be a source or a sink. Managed and distributes Tasks."
    },
    {
      "id": 10,
      "question": "What is a Partition?",
      "answer": "Splitting of topic. Messages in topic split across partitions. Can be viewed as a log."
    },
    {
      "id": 11,
      "question": "What are Stateless Transformations?",
      "answer": "Transformations that take stream records and republish as new streams. Map, filter, groupByKey, flatMap."
    },
    {
      "id": 12,
      "question": "What is a Hopping Window?",
      "answer": "Fixed size, overlapping windows. Rolling count, average, anomolies."
    },
    {
      "id": 13,
      "question": "What are Windows in Kafka Streams?",
      "answer": "Divide stream into time buckets. Tumbling, hopping, and session."
    },
    {
      "id": 14,
      "question": "What is ksql.service.id?",
      "answer": "Name of ksql internal topic for commands."
    },
    {
      "id": 15,
      "question": "What is a Broker?",
      "answer": "Kafka consists of brokers. Cluster of brokers. Receives and stores messages from producers. Shares metadata with producers/consumers: mapping of partitions, ISR info, who is the leader."
    },
    {
      "id": 16,
      "question": "What is num.partitions?",
      "answer": "Broker setting. Default number of partitions for new topics."
    },
    {
      "id": 17,
      "question": "What is an Offset?",
      "answer": "The numeric position of a message within a topic. Ordered by age."
    },
    {
      "id": 18,
      "question": "What is a Sink Processor?",
      "answer": "Stream processer with no downstream. Ends Stream processing."
    },
    {
      "id": 19,
      "question": "What are Workers in Kafka Connect?",
      "answer": "Runs one of more Connect Tasks, each in a different thread. Can be run in groups, like consumers, with group.id. Producers and/or consumer. Instance of Connect."
    },
    {
      "id": 20,
      "question": "What is fetch.max.wait.ms?",
      "answer": "Amount of time to wait (max) before returning from fetch. Throughput vs latency."
    },
    {
      "id": 21,
      "question": "What is a Source Processor?",
      "answer": "Stream processor that does not have any upstream. Originator of data."
    },
    {
      "id": 22,
      "question": "What are In-Sync Replicas (ISR)?",
      "answer": "Replica of partition that stays in-sync with leader. Exists to prevent message loss."
    },
    {
      "id": 23,
      "question": "What is auto.create.topic.enable?",
      "answer": "Enable/disable auto creation of topic. Broker setting."
    },
    {
      "id": 24,
      "question": "What is a Nack?",
      "answer": "Broker returns this to producer if message failed. Producer automatically retiris until retiries exhausted."
    },
    {
      "id": 25,
      "question": "What is a Partitioning Strategy?",
      "answer": "How messages are assigned to partitions. Default: hash(key) % number of partitions. No key -> round robin. Can be customized. Used for load balancing. Can be used for semantic partitoning."
    },
    {
      "id": 26,
      "question": "What is 'At most once' delivery?",
      "answer": "Never be a duplicate. Record ay get lost."
    },
    {
      "id": 27,
      "question": "What is a Consumer Group?",
      "answer": "Parallelize consumers by having multiple in a group. Partitons are load balanced to consumers in a group."
    },
    {
      "id": 28,
      "question": "What is a Sink Connector?",
      "answer": "Write Kafka data to external system. Internally uses a consumer group."
    },
    {
      "id": 29,
      "question": "What are Joins in Kafka Streams?",
      "answer": "Combine streams or tables into new streams on a key. Can be windowed."
    },
    {
      "id": 30,
      "question": "What is Retention Time / Retention Policy?",
      "answer": "How long Broker keeps produced data around. Default is 1 week. Kept in local storage. Set globally per topic."
    },
    {
      "id": 31,
      "question": "What is 'Exactly Once' delivery?",
      "answer": "Record is never lost. Never duplicated. Strong transactional guarantees."
    },
    {
      "id": 32,
      "question": "What is Kafka Connect?",
      "answer": "Pluggable framework form getting data into and out of Kafka."
    },
    {
      "id": 33,
      "question": "What is num.stream.threads?",
      "answer": "Number of threads to execute stream processing. Default is 1. Limited by number of partitions."
    },
    {
      "id": 34,
      "question": "What is min.insync.replicas?",
      "answer": "Min number of replicas that must ack request when acks=all. It is a topic setting."
    },
    {
      "id": 35,
      "question": "How do you calculate the number of partitions?",
      "answer": "max((target throughout / producer throughput per partition), (target throughput / consumer throughput per partition)). Pick a number that is highly divisible."
    },
    {
      "id": 36,
      "question": "What is Apache Kafka?",
      "answer": "Real time event streaming. Pub-sub system. Based on logs."
    },
    {
      "id": 37,
      "question": "What is max.in.flight.requests.per.connection?",
      "answer": "Max in flights requests per connection. Number of producer requests that can be made in parallel. Producer setting."
    },
    {
      "id": 38,
      "question": "What are Stream-stream Joins?",
      "answer": "Inner, left outer, and full outer. Must specify windowing. Either left or right can trigger join."
    },
    {
      "id": 39,
      "question": "What are Subject Naming Strategies?",
      "answer": "TopicNameStrategy: Default {topic name}-key, {topic name}-value. RecordNameStrategy: {class/type name (often fully qualified avro type name)}. Any number of event types in same topic. TopicRecordNameStategy: {topic name}-{class/type name}."
    },
    {
      "id": 40,
      "question": "What is unclean.leader.election.enable?",
      "answer": "If true, enables replicas not in the ISR to be elected as leader as last resort. Broker setting."
    },
    {
      "id": 41,
      "question": "What are Partition Assignment Strategies?",
      "answer": "How paritions are assigned to consumers in a group. Range, Round Robin, and Sticky are examples."
    },
    {
      "id": 42,
      "question": "What is Range Assignment Strategy?",
      "answer": "Default. Assigns matching partitions to the same consumer. Useful for copartitioning."
    },
    {
      "id": 43,
      "question": "What is Round Robin Assignment Strategy?",
      "answer": "Assigned one at a time. In rotating fashion. More balanced."
    },
    {
      "id": 44,
      "question": "What is Sticky Assignment Strategy?",
      "answer": "Assignments are preserved across reassignments. Round robin with assignment preservation."
    },
    {
      "id": 45,
      "question": "What are Kafka Streams?",
      "answer": "Client library for building streaming apps. Wrapper around producer/consumer APIs."
    },
    {
      "id": 46,
      "question": "What is a Producer?",
      "answer": "Sends data to Kafka. Received ack/nack from Kafka. Many producers == concurrent sends. Decoupled from Consumers."
    },
    {
      "id": 47,
      "question": "What is a Record in Kafka?",
      "answer": "Synonymous with log, message, event. Has a Metadata section and a Body section. Metadata contains offset, timestamp, magic byte, compression, optional headers. Body contains key and value."
    },
    {
      "id": 48,
      "question": "What is KsqlDB?",
      "answer": "Develop streaming applications with SQL-like interface. Wrapper around Kafka Streams."
    },
    {
      "id": 49,
      "question": "What is a Consumer Offset?",
      "answer": "Keeps track of last message read by consumer/group. Stored in special topic. Can be changes to re-read messages."
    },
    {
      "id": 50,
      "question": "What are Stateful Transformations?",
      "answer": "Stream transformations that need to keep a cache or table to accumulate a value or provide lookup. Join, window, aggregate, reduce."
    },
    {
      "id": 51,
      "question": "What is auto.offset.reset?",
      "answer": "Applies only to consumers that do not already have an offset. Earliest: Start at first available offset. Latest: Star at latest offset. None: Crash if offset has been deleted."
    },
    {
      "id": 52,
      "question": "What is 'At Least Once' delivery?",
      "answer": "Record will never get lost, but may be duplicated."
    },
    {
      "id": 53,
      "question": "What is Zookeeper?",
      "answer": "Cluster Management. Failure detection & recovery. Stores ACLs and secrets. 3 or 5 form ensemble. Now replaced by KRaft."
    },
    {
      "id": 54,
      "question": "What is batch.size?",
      "answer": "Message batch size in bytes. Default 16KB. Make large for high throughput. Make small for low latency. Kafka does not batch until batch size is reached. Producer setting."
    },
    {
      "id": 55,
      "question": "What is a Session Window?",
      "answer": "Sessions with periods of activity and inactivity. Users tend to work in sessions."
    },
    {
      "id": 56,
      "question": "What is Role Based Access Control (RBAC)?",
      "answer": "Available in Confluent Platform. Assign role to user. User will get all priviledges assigned to that role. Predefined roles include: SystemAdmin, UserAdmin, ClusterAdmin, Operator, SecurityAdmin, ResourceOwner, Developer."
    },
    {
      "id": 57,
      "question": "What is a Consumer?",
      "answer": "Polls brokers. Subscribes to topics. Listens for all partitions of a topic (unless in a group). Decoupled from producers."
    },
    {
      "id": 58,
      "question": "What is Encryption of data in transit?",
      "answer": "Encrupt between Kafka clients and Brokers. Critical when communicating over public internet. TLS."
    },
    {
      "id": 59,
      "question": "What are Compacted Topics?",
      "answer": "Kafka will keep latest version of record with a given key. Deletes older versions - happens when segment is closed."
    },
    {
      "id": 60,
      "question": "What is ksql.streams.num.streams.threads?",
      "answer": "Sets the number of stream threads for KSQL. For vertical scaling. Num threads = num tasks = max(num partions) over input topics."
    },
    {
      "id": 61,
      "question": "What are Table-Table Joins?",
      "answer": "Primary key: inner, left outer, full outer. Foreign key: inner, left outer. Non-windowed. Eventually consistent."
    },
    {
      "id": 62,
      "question": "What is a Pull Query?",
      "answer": "Looks up current value from materialized view. Non-persistent. Good for synchronous."
    },
    {
      "id": 63,
      "question": "What are Asynchronous Commits?",
      "answer": "Consuer can return immediately from poll and continue work. Increases chance of duplicates. Good for at least once semantics."
    },
    {
      "id": 64,
      "question": "What is an Ack?",
      "answer": "Broker returns this to Producer on successful message creation. Broker acks in batches."
    },
    {
      "id": 65,
      "question": "What is Ack 0?",
      "answer": "Ack immediately. At most once. High throughput."
    },
    {
      "id": 66,
      "question": "What is Ack 1?",
      "answer": "Ack if the leader acks. Default. At most once."
    },
    {
      "id": 67,
      "question": "What is Ack All (-1)?",
      "answer": "Acks if leader + ISRs ack. At least once. Lower thoughput."
    },
    {
      "id": 68,
      "question": "What is num.standby.replicas?",
      "answer": "Number of standby replicas to have. Default 0. For Kafka Streams."
    },
    {
      "id": 69,
      "question": "What is a Connect Partition?",
      "answer": "Different from Kafka partitions. Refers to any subset of data in source or sink data that can be logically broken out into partitons. For example, tables in a database."
    },
    {
      "id": 70,
      "question": "What is Broker Replication?",
      "answer": "Brokers replicate partitions across servers in the cluster. 1 leader and 0 or more followers."
    },
    {
      "id": 71,
      "question": "What is /kafka-acl/?",
      "answer": "Zookeeper diretory for ACL info."
    },
    {
      "id": 72,
      "question": "What is an Access Control List (ACL)?",
      "answer": "Authorize \"principals\" for various Kafka resources (i.e. topics). Supports prefix patterns."
    },
    {
      "id": 73,
      "question": "What is group.id?",
      "answer": "Indentifies a consumer or group of consumers. Can already identify groups of Kafka Connect Workers. Consumer setting."
    },
    {
      "id": 74,
      "question": "What is a Tumbling Window?",
      "answer": "Fixed sized, not overlapping windows based on timestamps. Basic trends, time analysis."
    },
    {
      "id": 75,
      "question": "What is default.replication.factor?",
      "answer": "Broker setting. Default replication factor for new topics."
    },
    {
      "id": 76,
      "question": "What is a Push Query?",
      "answer": "Subscribes to a stream. Async control flow."
    },
    {
      "id": 77,
      "question": "What is __consumer_offsets?",
      "answer": "Special topic that tracks current offset for each (consumer group, topic, partition) tuple."
    },
    {
      "id": 78,
      "question": "What is Broker Local Storage?",
      "answer": "Broker keeps page cache of messages. Periodically flushes to disk."
    },
    {
      "id": 79,
      "question": "What is a Log in Kafka?",
      "answer": "Basically a message in Kafka. Immutable. Has an offset within a partition. Can be read by any number of consumers. Ordered temporarily."
    },
    {
      "id": 80,
      "question": "What is REST Proxy?",
      "answer": "RESTful interface to Kafka. For remote clients (producers & consumers). POST to send data, GET to read. Sends data to Kafka in binary."
    },
    {
      "id": 81,
      "question": "What is key.serializer?",
      "answer": "Producer setting, required. Class name of class that will serialize, like StringSerializer."
    },
    {
      "id": 82,
      "question": "What is Avro?",
      "answer": "Data serialization format form Apache. Self describing schema. Offers code generation of types. Does type checking at write time."
    },
    {
      "id": 83,
      "question": "What is Avro Backward Compatibility?",
      "answer": "Code with new version can ready old version. Assumes default values for new fields."
    },
    {
      "id": 84,
      "question": "What is Avro Forward Compatibility?",
      "answer": "Code with previous version can ready new messages. Ignores new fields."
    },
    {
      "id": 85,
      "question": "What is replication_factor?",
      "answer": "Includes leader. How many replicas to create for a partition. Topic level config."
    },
    {
      "id": 86,
      "question": "What is consumer.assign?",
      "answer": "Manually specify partition to assign to consumer. Can manually assign to multple partitons. Also subscribes to those partitions."
    },
    {
      "id": 87,
      "question": "What are Retriable Producer Errors?",
      "answer": "NOT_LEADER_FOR_PARTITION, NOT_ENOUGH_REPLICAS, UNKNOWN_TOPIC_OR_PARTITION"
    },
    {
      "id": 88,
      "question": "What is max.poll.interval.ms?",
      "answer": "Increase the max time that consumers can wait on a poll. Give consumer more time ot handle batch, but can affect consumer rebalancing. Default 5 minutes."
    },
    {
      "id": 89,
      "question": "What is consumer.subscribe?",
      "answer": "Subscrie to ne or more tpics with either a reges or an array."
    },
    {
      "id": 90,
      "question": "What is a Segment?",
      "answer": "Logs in partiton are subdivided into segments. Kept in Broker local storage with a rolling file strategy. Rolls over in segments, compacts in segments. 2 indexes - offset index and time index."
    },
    {
      "id": 91,
      "question": "What is value.serializer?",
      "answer": "Producer setting, required. Class name of class that will serialize, like StringSerializer."
    },
    {
      "id": 92,
      "question": "What is --under-replicated-partitions?",
      "answer": "Refers to follows that are not in-sync with leader. Zookeeper option."
    },
    {
      "id": 93,
      "question": "What is processing.guarantee?",
      "answer": "Streams app setting for at_least_once or exactly_once."
    },
    {
      "id": 94,
      "question": "What is Client Authorization?",
      "answer": "Authorize authenticated clients to read or write to/from topics. ACLS."
    },
    {
      "id": 95,
      "question": "What is linger.ms?",
      "answer": "Time to wait for messages to batch together. Make large for high throughput. Make small for low latency. Producer setting."
    },
    {
      "id": 96,
      "question": "What is a Persistent Query?",
      "answer": "In KSQL, create stream or create table. Read and write to kakfa topics. Results in new streams and tables that persist."
    },
    {
      "id": 97,
      "question": "What is Schema Registry?",
      "answer": "Define schemas for kets and values on topics. Prevent backwards incompatible chagnes. Automatically handles schema changes. Avro, protobuf, and JSON."
    },
    {
      "id": 98,
      "question": "What is _schemas?",
      "answer": "Special topic for storing schemas."
    },
    {
      "id": 99,
      "question": "What is bootstrap.servers?",
      "answer": "Comma separated list of broker hostnames in the cluster."
    },
    {
      "id": 100,
      "question": "What is max.poll.records?",
      "answer": "Max number of records to return in a single poll. Reduces poll interval. Reduces impact of consumer rebalancing."
    },
    {
      "id": 101,
      "question": "What is a Non-persistent Query?",
      "answer": "KSQLDB queries like count, join, select are non-persistent. They may read and write to Kafka, but those objects are deleted."
    },
    {
      "id": 102,
      "question": "What is fetch.min.bytes?",
      "answer": "Controls how much data min to read at each fetch. Throughput vs latency. Consumer setting."
    },
    {
      "id": 103,
      "question": "What is a Stream Processor?",
      "answer": "Node in processor topology that transforms records in a stream one record at a time."
    },
    {
      "id": 104,
      "question": "What are Stream-table Joins?",
      "answer": "Inner and left joins only. Non-windowed joins. Only input from left triggers a join."
    },
    {
      "id": 105,
      "question": "What are Standby Replicas?",
      "answer": "Shadow copy of local state store for streams tasks. Faster task recovery."
    },
    {
      "id": 106,
      "question": "What is MQTT?",
      "answer": "Protocol for sending data supported by Kafka. Required MQTT proxy to run. Used for publishing data."
    },
    {
      "id": 107,
      "question": "What is a Processor Topology?",
      "answer": "Graph of stream processors (nodes) connected by steams (edges)."
    },
    {
      "id": 108,
      "question": "What is the Kafka Controller?",
      "answer": "A broker that is responsible for managing the state of partitions and replicas and for performing administrative tasks."
    },
    {
      "id": 109,
      "question": "What is KRaft mode?",
      "answer": "Kafka Raft (KRaft) is the consensus protocol replacing ZooKeeper for metadata management in Kafka, providing a ZooKeeper-less deployment option."
    },
    {
      "id": 110,
      "question": "What is idempotent producer?",
      "answer": "A producer that prevents duplicate messages by assigning each message a sequence number."
    },
    {
      "id": 111,
      "question": "What are the delivery semantics in Kafka?",
      "answer": "The guarantees Kafka provides for message delivery: at-most-once, at-least-once, or exactly-once."
    },
    {
      "id": 112,
      "question": "What is a dead letter queue in Kafka?",
      "answer": "A topic where messages that cannot be processed are sent for later handling or diagnosis."
    },
    {
      "id": 113,
      "question": "What is a KTable?",
      "answer": "A representation of a changelog stream in Kafka Streams, where each record represents an update to a key."
    },
    {
      "id": 114,
      "question": "What is a GlobalKTable?",
      "answer": "Similar to a KTable, but replicated on each instance of a Kafka Streams application for local joins."
    },
    {
      "id": 115,
      "question": "What is the rack awareness feature in Kafka?",
      "answer": "A feature that allows Kafka to distribute replicas across different racks, data centers, or availability"
    },
    {
      "id": 116,
      "question": "What is the ControllerService in KRaft mode?",
      "answer": "The component responsible for managing metadata and handling controller operations in KRaft mode, replacing ZooKeeper's functionality."
    },
    {
      "id": 117,
      "question": "What is Confluent Cloud?",
      "answer": "A fully‑managed, cloud‑native Apache Kafka service on AWS, GCP, and Azure with elastic scaling, enterprise security, stream processing, and governance."
    },
    {
      "id": 118,
      "question": "What is Kora in Confluent Cloud?",
      "answer": "Confluent’s cloud‑native Kafka engine that enables elastic scaling, high resiliency, infinite storage, and low latency."
    },
    {
      "id": 119,
      "question": "What cluster types does Confluent Cloud offer?",
      "answer": "Basic, Standard, Enterprise, and Dedicated—differing in scaling, availability, networking, and SLA options."
    },
    {
      "id": 120,
      "question": "What is Tiered Storage?",
      "answer": "A mechanism that offloads older topic data to durable cloud storage (e.g. S3) to enable virtually infinite retention with cost efficiency."
    },
    {
      "id": 121,
      "question": "What is Cluster Linking?",
      "answer": "A built‑in feature to replicate topics byte‑for‑byte across Confluent clusters or regions for geo‑replication, disaster recovery, hybrid and multi‑cloud setups."
    },
    {
      "id": 122,
      "question": "How does Cluster Linking differ from MirrorMaker or Replicator?",
      "answer": "It’s native, connector‑free, produces mirror topics with identical offsets and supports offset & ACL synchronization."
    },
    {
      "id": 123,
      "question": "What are mirror topics?",
      "answer": "Read‑only topic copies on a destination cluster where data, partitions, and offsets match the source exactly."
    },
    {
      "id": 124,
      "question": "What metadata does Cluster Linking sync?",
      "answer": "Topic configuration, consumer offsets, and optionally ACLs if both clusters are in the same organization."
    },
    {
      "id": 125,
      "question": "What networking options are available in Confluent Cloud?",
      "answer": "Public endpoints, VPC/VNet peering, PrivateLink/Private Service Connect, AWS Transit Gateway for Dedicated clusters."
    },
    {
      "id": 126,
      "question": "What connectivity options support high security?",
      "answer": "Dedicated clusters support private networking: VPC/VNet peering, AWS Transit Gateway, and PrivateLink/Private Service Connect."
    },
    {
      "id": 127,
      "question": "What authentication methods are supported?",
      "answer": "SASL/PLAIN and SASL/OAUTHBEARER with TLS 1.2 required; Kerberos is not supported."
    },
    {
      "id": 128,
      "question": "What encryption does Confluent Cloud provide?",
      "answer": "TLS 1.2 for in‑transit and cloud‑provider encryption at rest; BYOK supported on Dedicated clusters."
    },
    {
      "id": 129,
      "question": "What is RBAC in Confluent Cloud?",
      "answer": "Role‑Based Access Control to assign fine‑grained roles (e.g. Developer, Operator) to control access to clusters, topics, connectors, schemas, etc."
    },
    {
      "id": 130,
      "question": "When should you use Kafka ACLs in Confluent Cloud?",
      "answer": "When RBAC isn’t available (e.g. Basic clusters) or for fine‑grained client‑side authorization control."
    },
    {
      "id": 131,
      "question": "What compliance certifications does Confluent Cloud hold?",
      "answer": "SOC 1/2/3, ISO 27001/27701, PCI; Dedicated clusters provide isolation from other tenants."
    },
    {
      "id": 132,
      "question": "How do you manage schemas?",
      "answer": "Using managed Schema Registry supporting Avro, JSON Schema, and Protobuf with versioning & compatibility policy enforcement."
    },
    {
      "id": 133,
      "question": "What is Stream Governance?",
      "answer": "A suite of tools (Schema Registry, Stream Catalog, Lineage) to enable data discovery, compliance and governance for streaming data."
    },
    {
      "id": 134,
      "question": "What is the Stream Catalog?",
      "answer": "A central index of all streams (topics, schemas, connectors, processing apps) to improve observability and governance."
    },
    {
      "id": 135,
      "question": "What is Stream Lineage?",
      "answer": "Feature that tracks how data flows through topics, schemas, connectors and apps to support impact analysis and auditability."
    },
    {
      "id": 136,
      "question": "What stream processing is available?",
      "answer": "Fully‑managed serverless Flink and ksqlDB for building event‑driven apps, enrichment, filtering, joining, transformations."
    },
    {
      "id": 137,
      "question": "What is ksqlDB?",
      "answer": "SQL‑based stream processing engine for interactive query, transformations, enrichment, join, and filtering on Kafka data."
    },
    {
      "id": 138,
      "question": "What is Flink on Confluent Cloud?",
      "answer": "Serverless Apache Flink service for complex, low‑latency, stateful streaming workflows in a fully managed way."
    },
    {
      "id": 139,
      "question": "What are Connectors in Confluent Cloud?",
      "answer": "Fully‑managed pre‑built Kafka Connect connectors for popular data systems—70+ available for source and sink use cases."
    },
    {
      "id": 140,
      "question": "What is Stream Designer?",
      "answer": "A visual interface to design, test and deploy streaming pipelines using connectors and ksqlDB in Confluent Cloud."
    },
    {
      "id": 141,
      "question": "How do you monitor Confluent Cloud?",
      "answer": "Metrics API, Control Center (UI), Prometheus exporters, Grafana integration, and CLI/API tooling."
    },
    {
      "id": 142,
      "question": "What is the Metrics API?",
      "answer": "An endpoint providing pre‑aggregated topic, connector, and cluster metrics like lag, throughput, latency and resource usage."
    },
    {
      "id": 143,
      "question": "What is the Confluent CLI?",
      "answer": "Command‑line tool to manage clusters, topics, connectors, schemas, links, API keys, ACLs, quotas, and billing."
    },
    {
      "id": 144,
      "question": "What APIs does Confluent Cloud expose?",
      "answer": "REST and GraphQL APIs for clusters, topics, connectors, schemas, metrics, quotas and billing."
    },
    {
      "id": 145,
      "question": "What is ccloud‑stack?",
      "answer": "Utility script using Confluent CLI to bootstrap all core Confluent Cloud resources for test/demo environments."
    },
    {
      "id": 146,
      "question": "What are API keys?",
      "answer": "Credentials used by clients or services to authenticate via SASL; can be rotated or revoked via CLI/API."
    },
    {
      "id": 147,
      "question": "How are service accounts used?",
      "answer": "Machine identities that own API keys and are granted roles to manage or access cluster resources."
    },
    {
      "id": 148,
      "question": "What are Service Quotas?",
      "answer": "Limits on resource use (CKUs, connectors, links, storage) monitored via API/CLI; can be requested to increase."
    },
    {
      "id": 149,
      "question": "What is CKU in Confluent Cloud?",
      "answer": "Confluent Kafka Unit: capacity and throughput allocation, scalable up or down to meet performance requirements."
    },
    {
      "id": 150,
      "question": "What is Kafka replica placement?",
      "answer": "Fully managed rack and Availability Zone aware partition replica placement to optimize availability and fault tolerance."
    },
    {
      "id": 151,
      "question": "What is auto‑balancing?",
      "answer": "Automatic rebalancing of partitions across brokers to optimize resource utilization."
    },
    {
      "id": 152,
      "question": "How are schema compatibility settings enforced?",
      "answer": "Compatibility levels (backward/forward/full) are enforced at the Schema Registry to prevent breaking changes."
    },
    {
      "id": 153,
      "question": "What data protocol formats are supported?",
      "answer": "Avro, JSON Schema and Protobuf schemas via Schema Registry."
    },
    {
      "id": 154,
      "question": "What is BYOK?",
      "answer": "Bring‑Your‑Own‑Key encryption: customer‑managed encryption key option for Dedicated clusters at rest."
    },
    {
      "id": 155,
      "question": "Are IPs static in Confluent Cloud?",
      "answer": "No; DNS is used. However, egress IPs are provided for use in connector and cluster‑link environments."
    },
    {
      "id": 156,
      "question": "What is public egress IP?",
      "answer": "Static outbound IPs from connectors and cluster links for firewall whitelisting."
    },
    {
      "id": 157,
      "question": "What is PrivateLink/Private Service Connect?",
      "answer": "Secure private networking channel between customer VPC/VNet and a Confluent Cloud service on supported clouds."
    },
    {
      "id": 158,
      "question": "What is VPC/VNet peering?",
      "answer": "Network-level peering between customer and Confluent infrastructure for secure traffic."
    },
    {
      "id": 159,
      "question": "What is Transit Gateway support?",
      "answer": "Integration with AWS Transit Gateway for routing between multiple VPCs and Confluent Cloud Dedicated clusters."
    },
    {
      "id": 160,
      "question": "What monitoring features are available for connectors?",
      "answer": "Connector logs via UI/CLI, metrics via Metrics API, lag monitoring and status alerts."
    },
    {
      "id": 161,
      "question": "What auditing features exist?",
      "answer": "Structured audit logs capture API, CLI, RBAC events into a tamper‑resistant stream for compliance tracking."
    },
    {
      "id": 162,
      "question": "What security applies to cluster linking?",
      "answer": "Cluster Linking requires RBAC or ACL roles; uses service accounts; ACL sync works within same org."
    },
    {
      "id": 163,
      "question": "How are cluster links configured?",
      "answer": "Via Confluent CLI (‘confluent kafka link create/list/update’) or REST API v3."
    },
    {
      "id": 164,
      "question": "Can you delete or pause mirror topics?",
      "answer": "Yes—CLI/REST API supports pause, resume, failover, promote and delete mirror topics."
    },
    {
      "id": 165,
      "question": "What quotas apply to cluster linking?",
      "answer": "Ingress/egress quotas for mirror replication are counted against CKU and are subject to produce/read limits."
    },
    {
      "id": 166,
      "question": "How is cluster linking throughput scaled?",
      "answer": "By scaling CKUs on source and/or destination; Confluent monitors and adjusts performance automatically."
    },
    {
      "id": 167,
      "question": "What limitations does cluster linking have?",
      "answer": "Max 10 links per destination; no exactly‑once transactional support; ACL sync needs same org; connectivity constraints."
    },
    {
      "id": 168,
      "question": "What client languages are supported?",
      "answer": "Official clients in Java, plus librdkafka‑derived libraries: C/C++, Python, Go, Node.js, .NET, Ruby."
    },
    {
      "id": 169,
      "question": "What is exactly‑once delivery support?",
      "answer": "EOS is supported by clients (Kafka 0.11+), but transactional use on mirror topics is not supported."
    },
    {
      "id": 170,
      "question": "What is follower fetching in multi‑region clusters?",
      "answer": "Clients can read from follower or observer replicas in the same region to reduce inter‑region traffic."
    },
    {
      "id": 171,
      "question": "What are observer replicas?",
      "answer": "Topic replicas that don’t count in ISR but can serve follower fetch/read traffic."
    },
    {
      "id": 172,
      "question": "Does Confluent Cloud support multi‑region stretched clusters?",
      "answer": "Confluent Platform supports it; Cloud users typically use cluster linking for similar geo‑resilient architectures."
    },
    {
      "id": 173,
      "question": "What are use cases for cluster linking?",
      "answer": "Disaster recovery/failover, migration, multi‑region high availability, hybrid bridging, data sharing, and workload separation."
    },
    {
      "id": 174,
      "question": "What is infinite storage in Confluent Cloud?",
      "answer": "Enabled by tiered storage backed by cloud object storage like S3, GCS, or Azure blob."
    },
    {
      "id": 175,
      "question": "What is self‑balancing?",
      "answer": "Broker‑level algorithm that balances partition load across cluster available resources."
    },
    {
      "id": 176,
      "question": "Are patching and upgrades seamless?",
      "answer": "Yes—Kora applies zero‑touch patching and cluster‑wide upgrades without downtime."
    },
    {
      "id": 177,
      "question": "What is elastic scaling?",
      "answer": "CKUs auto‑scale up/down for capacity; tiered storage decouples compute from storage."
    },
    {
      "id": 178,
      "question": "What is the Stream Governance suite?",
      "answer": "Primary components include Schema Registry, Stream Catalog, and Stream Lineage."
    },
    {
      "id": 179,
      "question": "What roles exist for Schema Registry RBAC?",
      "answer": "Roles like DeveloperRead, DeveloperWrite, DeveloperManage, and ResourceOwner enable subject‑level access control."
    },
    {
      "id": 180,
      "question": "What governs schema evolution?",
      "answer": "Compatibility rules (backward/forward/full) enforced in the Schema Registry ensure safe evolution."
    },
    {
      "id": 181,
      "question": "What monitoring is provided for Kafka consumers?",
      "answer": "Control Center and Metrics API allow consumer lag monitoring, throughput, offsets, health, and alerts."
    },
    {
      "id": 182,
      "question": "What is Control Center?",
      "answer": "UI dashboard to manage, monitor, and observe clusters, topics, consumer groups, connectors, and ksqlDB apps."
    },
    {
      "id": 183,
      "question": "What observability exports are available?",
      "answer": "Prometheus exporter and Grafana plugin integration are available for external metric visualization."
    },
    {
      "id": 184,
      "question": "How are connectors billed?",
      "answer": "Charged per connector‑hour based on resource usage for managed connectors."
    },
    {
      "id": 185,
      "question": "How is billing managed?",
      "answer": "Usage‑based billing on CKUs, storage, connectors, and links, viewable via billing API/CLI."
    },
    {
      "id": 186,
      "question": "What is the role of the Service Quotas API?",
      "answer": "It provides a programmatic interface to view and request quota increases for CKUs, connectors, links, and storage."
    },
    {
      "id": 187,
      "question": "What is the Stream Catalog REST API?",
      "answer": "Allows discovery and search of streams, schemas, connectors, and lineage metadata."
    },
    {
      "id": 188,
      "question": "What is the GraphQL API used for?",
      "answer": "Alternative interface to query stream metadata, governance entities, and provisioning information."
    },
    {
      "id": 189,
      "question": "What is the Metrics Exporter?",
      "answer": "Agent to push cluster metrics to Prometheus for external monitoring."
    },
    {
      "id": 190,
      "question": "Does Confluent Cloud support audit logging?",
      "answer": "Yes—operations through CLI, API, UI, and RBAC changes are logged and searchable."
    },
    {
      "id": 191,
      "question": "What is multi‑cloud availability?",
      "answer": "Clusters can be provisioned in 60+ regions across AWS, Azure, GCP, and cluster linking spans clouds."
    },
    {
      "id": 192,
      "question": "What is hybrid cloud support?",
      "answer": "You can link on‑prem or MSK clusters to Confluent Cloud using cluster linking and private networking."
    },
    {
      "id": 193,
      "question": "Can cluster linking mirror ACLs?",
      "answer": "Yes—ACL sync is available when both clusters are in the same Confluent organization."
    },
    {
      "id": 194,
      "question": "Can cluster linking mirror consumer offsets?",
      "answer": "Yes—offset sync aligns consumer progress between source and mirror topics."
    },
    {
      "id": 195,
      "question": "Can cluster linking mirror only selected topics?",
      "answer": "Yes—you can apply filters on topic names or regex when creating the link."
    },
    {
      "id": 196,
      "question": "What is bidirectional cluster linking?",
      "answer": "Allows mirroring data in both directions when network connectivity permits."
    },
    {
      "id": 197,
      "question": "What is CKU ingress vs egress?",
      "answer": "Ingress is data produced into a cluster; egress is data read or replicated out—both count toward quotas."
    },
    {
      "id": 198,
      "question": "How is private networking configured?",
      "answer": "Enable Dedicated clusters and configure peering or PrivateLink via the UI or CLI, then exchange connection details."
    },
    {
      "id": 199,
      "question": "What is the Confluent AI Assistant?",
      "answer": "An experimental Console feature that assists in troubleshooting and generating configuration suggestions."
    },
    {
      "id": 200,
      "question": "What is the cluster type impact on RBAC?",
      "answer": "Basic clusters don’t support RBAC inside Kafka; Standard+ and Dedicated clusters support full RBAC."
    },
    {
      "id": 201,
      "question": "What is Structured Audit Logs?",
      "answer": "An audit log format that write logs into Kafka topics to track permissions and system actions."
    },
    {
      "id": 202,
      "question": "What is Stream Designer used for?",
      "answer": "A visual pipeline builder to construct and deploy streaming flows using connectors and ksqlDB."
    },
    {
      "id": 203,
      "question": "Where can you get connector logs?",
      "answer": "Available in the UI or accessible via CLI/REST to assist in debugging connector tasks and failures."
    },
    {
      "id": 204,
      "question": "What features do Confluent clients support?",
      "answer": "Clients in Java, Go, C/C++, Python, Node.js, .NET, Ruby support full producer/consumer and stream processing use cases."
    },
    {
      "id": 205,
      "question": "What features does Control Center provide?",
      "answer": "Monitoring, alerting, and management of topics, consumer lag, connectors, ksqlDB apps, and governance."
    },
    {
      "id": 206,
      "question": "What is automatic schema validation?",
      "answer": "Server‑side enforcement in the Schema Registry ensuring producers adhere to compatibility settings."
    },
    {
      "id": 207,
      "question": "What is a schema subject?",
      "answer": "A namespace grouping related schema versions used by a topic or client to enforce compatibility."
    },
    {
      "id": 208,
      "question": "How do you manage quotas?",
      "answer": "Use the CLI or API to list current quotas and request increases or decreases as workload needs change."
    },
    {
      "id": 209,
      "question": "What is the Service Quotas API?",
      "answer": "A RESTful way to view and request changes to quotas programmatically."
    },
    {
      "id": 210,
      "question": "What is the Stream Governance SDK?",
      "answer": "APIs to fetch catalog, lineage, and schema metadata for building integrations or custom tooling."
    },
    {
      "id": 211,
      "question": "What is the benefit of infinite retention?",
      "answer": "Stores recent data in Kafka and older data in tiered storage, reducing cost while retaining full history."
    },
    {
      "id": 212,
      "question": "What is the BYOK workflow?",
      "answer": "Customer uploads an encryption key to their KMS, applies it to a Dedicated cluster; Confluent uses it to encrypt at rest."
    },
    {
      "id": 213,
      "question": "What is the Connect REST API?",
      "answer": "API to manage connector lifecycle, monitor tasks, and perform control operations like pause, resume, and restart."
    },
    {
      "id": 214,
      "question": "What is the ksqlDB REST API?",
      "answer": "HTTP interface to create, run, and monitor ksqlDB queries and applications."
    },
    {
      "id": 215,
      "question": "What is cluster auto‑scale?",
      "answer": "Confluent Cloud automatically adjusts compute resources (CKUs) to maintain performance SLAs."
    },
    {
      "id": 216,
      "question": "What is self‑healing in Confluent Cloud?",
      "answer": "Kora automatically detects and recovers from broker failures without user intervention, maintaining uptime."
    }
  ]
}
