{
  "flashcards": [
    {
      "id": 1,
      "question": "What is a Topic?",
      "answer": "Logical representation for a log of messages as defined by developers. Auto created when first used. No limit to number of topics. Many to many relationship with Producers."
    },
    {
      "id": 2,
      "question": "What are Aggregations?",
      "answer": "Accumulate stream values as new record. Usually windowed. Sum, count, min, max. Stateful."
    },
    {
      "id": 3,
      "question": "What is a Connector Thread?",
      "answer": "Special thread owned by a connector to coordinate jobs."
    },
    {
      "id": 4,
      "question": "What is a Source Connector?",
      "answer": "Reads data from external system to Kafka. Internally uses producer."
    },
    {
      "id": 5,
      "question": "What is Client authentication?",
      "answer": "Enable from applications to brokers. Define which applications can connect. MTLS, SASL, SSL."
    },
    {
      "id": 6,
      "question": "What is buffer.memory?",
      "answer": "Producer's buffer for messages sent to cluster. Increase if producers are sending faster than brokers are acking. Default 32MB. Adjust for: Caching from slow brokers, large batch.size, large message size, topics with large partition counts."
    },
    {
      "id": 7,
      "question": "What are Tasks in Kafka Connect?",
      "answer": "Connector jobs broken into Tasks. Distributed to workers by Connect. Each Task is run in its own thread."
    },
    {
      "id": 8,
      "question": "What is Copartitioning?",
      "answer": "Streams are co-partitioned when they have the same number of partitions and same partitioning strategy."
    },
    {
      "id": 9,
      "question": "What are Connectors?",
      "answer": "Kafka Connect plugins. Can be a source or a sink. Managed and distributes Tasks."
    },
    {
      "id": 10,
      "question": "What is a Partition?",
      "answer": "Splitting of topic. Messages in topic split across partitions. Can be viewed as a log."
    },
    {
      "id": 11,
      "question": "What are Stateless Transformations?",
      "answer": "Transformations that take stream records and republish as new streams. Map, filter, groupByKey, flatMap."
    },
    {
      "id": 12,
      "question": "What is a Hopping Window?",
      "answer": "Fixed size, overlapping windows. Rolling count, average, anomolies."
    },
    {
      "id": 13,
      "question": "What are Windows in Kafka Streams?",
      "answer": "Divide stream into time buckets. Tumbling, hopping, and session."
    },
    {
      "id": 14,
      "question": "What is ksql.service.id?",
      "answer": "Name of ksql internal topic for commands."
    },
    {
      "id": 15,
      "question": "What is a Broker?",
      "answer": "Kafka consists of brokers. Cluster of brokers. Receives and stores messages from producers. Shares metadata with producers/consumers: mapping of partitions, ISR info, who is the leader."
    },
    {
      "id": 16,
      "question": "What is num.partitions?",
      "answer": "Broker setting. Default number of partitions for new topics."
    },
    {
      "id": 17,
      "question": "What is an Offset?",
      "answer": "The numeric position of a message within a topic. Ordered by age."
    },
    {
      "id": 18,
      "question": "What is a Sink Processor?",
      "answer": "Stream processer with no downstream. Ends Stream processing."
    },
    {
      "id": 19,
      "question": "What are Workers in Kafka Connect?",
      "answer": "Runs one of more Connect Tasks, each in a different thread. Can be run in groups, like consumers, with group.id. Producers and/or consumer. Instance of Connect."
    },
    {
      "id": 20,
      "question": "What is fetch.max.wait.ms?",
      "answer": "Amount of time to wait (max) before returning from fetch. Throughput vs latency."
    },
    {
      "id": 21,
      "question": "What is a Source Processor?",
      "answer": "Stream processor that does not have any upstream. Originator of data."
    },
    {
      "id": 22,
      "question": "What are In-Sync Replicas (ISR)?",
      "answer": "Replica of partition that stays in-sync with leader. Exists to prevent message loss."
    },
    {
      "id": 23,
      "question": "What is auto.create.topic.enable?",
      "answer": "Enable/disable auto creation of topic. Broker setting."
    },
    {
      "id": 24,
      "question": "What is a Nack?",
      "answer": "Broker returns this to producer if message failed. Producer automatically retiris until retiries exhausted."
    },
    {
      "id": 25,
      "question": "What is a Partitioning Strategy?",
      "answer": "How messages are assigned to partitions. Default: hash(key) % number of partitions. No key -> round robin. Can be customized. Used for load balancing. Can be used for semantic partitoning."
    },
    {
      "id": 26,
      "question": "What is 'At most once' delivery?",
      "answer": "Never be a duplicate. Record ay get lost."
    },
    {
      "id": 27,
      "question": "What is a Consumer Group?",
      "answer": "Parallelize consumers by having multiple in a group. Partitons are load balanced to consumers in a group."
    },
    {
      "id": 28,
      "question": "What is a Sink Connector?",
      "answer": "Write Kafka data to external system. Internally uses a consumer group."
    },
    {
      "id": 29,
      "question": "What are Joins in Kafka Streams?",
      "answer": "Combine streams or tables into new streams on a key. Can be windowed."
    },
    {
      "id": 30,
      "question": "What is Retention Time / Retention Policy?",
      "answer": "How long Broker keeps produced data around. Default is 1 week. Kept in local storage. Set globally per topic."
    },
    {
      "id": 31,
      "question": "What is 'Exactly Once' delivery?",
      "answer": "Record is never lost. Never duplicated. Strong transactional guarantees."
    },
    {
      "id": 32,
      "question": "What is Kafka Connect?",
      "answer": "Pluggable framework form getting data into and out of Kafka."
    },
    {
      "id": 33,
      "question": "What is num.stream.threads?",
      "answer": "Number of threads to execute stream processing. Default is 1. Limited by number of partitions."
    },
    {
      "id": 34,
      "question": "What is min.insync.replicas?",
      "answer": "Min number of replicas that must ack request when acks=all. It is a topic setting."
    },
    {
      "id": 35,
      "question": "How do you calculate the number of partitions?",
      "answer": "max((target throughout / producer throughput per partition), (target throughput / consumer throughput per partition)). Pick a number that is highly divisible."
    },
    {
      "id": 36,
      "question": "What is Apache Kafka?",
      "answer": "Real time event streaming. Pub-sub system. Based on logs."
    },
    {
      "id": 37,
      "question": "What is max.in.flight.requests.per.connection?",
      "answer": "Max in flights requests per connection. Number of producer requests that can be made in parallel. Producer setting."
    },
    {
      "id": 38,
      "question": "What are Stream-stream Joins?",
      "answer": "Inner, left outer, and full outer. Must specify windowing. Either left or right can trigger join."
    },
    {
      "id": 39,
      "question": "What are Subject Naming Strategies?",
      "answer": "TopicNameStrategy: Default {topic name}-key, {topic name}-value. RecordNameStrategy: {class/type name (often fully qualified avro type name)}. Any number of event types in same topic. TopicRecordNameStategy: {topic name}-{class/type name}."
    },
    {
      "id": 40,
      "question": "What is unclean.leader.election.enable?",
      "answer": "If true, enables replicas not in the ISR to be elected as leader as last resort. Broker setting."
    },
    {
      "id": 41,
      "question": "What are Partition Assignment Strategies?",
      "answer": "How paritions are assigned to consumers in a group. Range, Round Robin, and Sticky are examples."
    },
    {
      "id": 42,
      "question": "What is Range Assignment Strategy?",
      "answer": "Default. Assigns matching partitions to the same consumer. Useful for copartitioning."
    },
    {
      "id": 43,
      "question": "What is Round Robin Assignment Strategy?",
      "answer": "Assigned one at a time. In rotating fashion. More balanced."
    },
    {
      "id": 44,
      "question": "What is Sticky Assignment Strategy?",
      "answer": "Assignments are preserved across reassignments. Round robin with assignment preservation."
    },
    {
      "id": 45,
      "question": "What are Kafka Streams?",
      "answer": "Client library for building streaming apps. Wrapper around producer/consumer APIs."
    },
    {
      "id": 46,
      "question": "What is a Producer?",
      "answer": "Sends data to Kafka. Received ack/nack from Kafka. Many producers == concurrent sends. Decoupled from Consumers."
    },
    {
      "id": 47,
      "question": "What is a Record in Kafka?",
      "answer": "Synonymous with log, message, event. Has a Metadata section and a Body section. Metadata contains offset, timestamp, magic byte, compression, optional headers. Body contains key and value."
    },
    {
      "id": 48,
      "question": "What is KsqlDB?",
      "answer": "Develop streaming applications with SQL-like interface. Wrapper around Kafka Streams."
    },
    {
      "id": 49,
      "question": "What is a Consumer Offset?",
      "answer": "Keeps track of last message read by consumer/group. Stored in special topic. Can be changes to re-read messages."
    },
    {
      "id": 50,
      "question": "What are Stateful Transformations?",
      "answer": "Stream transformations that need to keep a cache or table to accumulate a value or provide lookup. Join, window, aggregate, reduce."
    },
    {
      "id": 51,
      "question": "What is auto.offset.reset?",
      "answer": "Applies only to consumers that do not already have an offset. Earliest: Start at first available offset. Latest: Star at latest offset. None: Crash if offset has been deleted."
    },
    {
      "id": 52,
      "question": "What is 'At Least Once' delivery?",
      "answer": "Record will never get lost, but may be duplicated."
    },
    {
      "id": 53,
      "question": "What is Zookeeper?",
      "answer": "Cluster Management. Failure detection & recovery. Stores ACLs and secrets. 3 or 5 form ensemble. Now replaced by KRaft."
    },
    {
      "id": 54,
      "question": "What is batch.size?",
      "answer": "Message batch size in bytes. Default 16KB. Make large for high throughput. Make small for low latency. Kafka does not batch until batch size is reached. Producer setting."
    },
    {
      "id": 55,
      "question": "What is a Session Window?",
      "answer": "Sessions with periods of activity and inactivity. Users tend to work in sessions."
    },
    {
      "id": 56,
      "question": "What is Role Based Access Control (RBAC)?",
      "answer": "Available in Confluent Platform. Assign role to user. User will get all priviledges assigned to that role. Predefined roles include: SystemAdmin, UserAdmin, ClusterAdmin, Operator, SecurityAdmin, ResourceOwner, Developer."
    },
    {
      "id": 57,
      "question": "What is a Consumer?",
      "answer": "Polls brokers. Subscribes to topics. Listens for all partitions of a topic (unless in a group). Decoupled from producers."
    },
    {
      "id": 58,
      "question": "What is Encryption of data in transit?",
      "answer": "Encrupt between Kafka clients and Brokers. Critical when communicating over public internet. TLS."
    },
    {
      "id": 59,
      "question": "What are Compacted Topics?",
      "answer": "Kafka will keep latest version of record with a given key. Deletes older versions - happens when segment is closed."
    },
    {
      "id": 60,
      "question": "What is ksql.streams.num.streams.threads?",
      "answer": "Sets the number of stream threads for KSQL. For vertical scaling. Num threads = num tasks = max(num partions) over input topics."
    },
    {
      "id": 61,
      "question": "What are Table-Table Joins?",
      "answer": "Primary key: inner, left outer, full outer. Foreign key: inner, left outer. Non-windowed. Eventually consistent."
    },
    {
      "id": 62,
      "question": "What is a Pull Query?",
      "answer": "Looks up current value from materialized view. Non-persistent. Good for synchronous."
    },
    {
      "id": 63,
      "question": "What are Asynchronous Commits?",
      "answer": "Consuer can return immediately from poll and continue work. Increases chance of duplicates. Good for at least once semantics."
    },
    {
      "id": 64,
      "question": "What is an Ack?",
      "answer": "Broker returns this to Producer on successful message creation. Broker acks in batches."
    },
    {
      "id": 65,
      "question": "What is Ack 0?",
      "answer": "Ack immediately. At most once. High throughput."
    },
    {
      "id": 66,
      "question": "What is Ack 1?",
      "answer": "Ack if the leader acks. Default. At most once."
    },
    {
      "id": 67,
      "question": "What is Ack All (-1)?",
      "answer": "Acks if leader + ISRs ack. At least once. Lower thoughput."
    },
    {
      "id": 68,
      "question": "What is num.standby.replicas?",
      "answer": "Number of standby replicas to have. Default 0. For Kafka Streams."
    },
    {
      "id": 69,
      "question": "What is a Connect Partition?",
      "answer": "Different from Kafka partitions. Refers to any subset of data in source or sink data that can be logically broken out into partitons. For example, tables in a database."
    },
    {
      "id": 70,
      "question": "What is Broker Replication?",
      "answer": "Brokers replicate partitions across servers in the cluster. 1 leader and 0 or more followers."
    },
    {
      "id": 71,
      "question": "What is /kafka-acl/?",
      "answer": "Zookeeper diretory for ACL info."
    },
    {
      "id": 72,
      "question": "What is an Access Control List (ACL)?",
      "answer": "Authorize \"principals\" for various Kafka resources (i.e. topics). Supports prefix patterns."
    },
    {
      "id": 73,
      "question": "What is group.id?",
      "answer": "Indentifies a consumer or group of consumers. Can already identify groups of Kafka Connect Workers. Consumer setting."
    },
    {
      "id": 74,
      "question": "What is a Tumbling Window?",
      "answer": "Fixed sized, not overlapping windows based on timestamps. Basic trends, time analysis."
    },
    {
      "id": 75,
      "question": "What is default.replication.factor?",
      "answer": "Broker setting. Default replication factor for new topics."
    },
    {
      "id": 76,
      "question": "What is a Push Query?",
      "answer": "Subscribes to a stream. Async control flow."
    },
    {
      "id": 77,
      "question": "What is __consumer_offsets?",
      "answer": "Special topic that tracks current offset for each (consumer group, topic, partition) tuple."
    },
    {
      "id": 78,
      "question": "What is Broker Local Storage?",
      "answer": "Broker keeps page cache of messages. Periodically flushes to disk."
    },
    {
      "id": 79,
      "question": "What is a Log in Kafka?",
      "answer": "Basically a message in Kafka. Immutable. Has an offset within a partition. Can be read by any number of consumers. Ordered temporarily."
    },
    {
      "id": 80,
      "question": "What is REST Proxy?",
      "answer": "RESTful interface to Kafka. For remote clients (producers & consumers). POST to send data, GET to read. Sends data to Kafka in binary."
    },
    {
      "id": 81,
      "question": "What is key.serializer?",
      "answer": "Producer setting, required. Class name of class that will serialize, like StringSerializer."
    },
    {
      "id": 82,
      "question": "What is Avro?",
      "answer": "Data serialization format form Apache. Self describing schema. Offers code generation of types. Does type checking at write time."
    },
    {
      "id": 83,
      "question": "What is Avro Backward Compatibility?",
      "answer": "Code with new version can ready old version. Assumes default values for new fields."
    },
    {
      "id": 84,
      "question": "What is Avro Forward Compatibility?",
      "answer": "Code with previous version can ready new messages. Ignores new fields."
    },
    {
      "id": 85,
      "question": "What is replication_factor?",
      "answer": "Includes leader. How many replicas to create for a partition. Topic level config."
    },
    {
      "id": 86,
      "question": "What is consumer.assign?",
      "answer": "Manually specify partition to assign to consumer. Can manually assign to multple partitons. Also subscribes to those partitions."
    },
    {
      "id": 87,
      "question": "What are Retriable Producer Errors?",
      "answer": "NOT_LEADER_FOR_PARTITION, NOT_ENOUGH_REPLICAS, UNKNOWN_TOPIC_OR_PARTITION"
    },
    {
      "id": 88,
      "question": "What is max.poll.interval.ms?",
      "answer": "Increase the max time that consumers can wait on a poll. Give consumer more time ot handle batch, but can affect consumer rebalancing. Default 5 minutes."
    },
    {
      "id": 89,
      "question": "What is consumer.subscribe?",
      "answer": "Subscrie to ne or more tpics with either a reges or an array."
    },
    {
      "id": 90,
      "question": "What is a Segment?",
      "answer": "Logs in partiton are subdivided into segments. Kept in Broker local storage with a rolling file strategy. Rolls over in segments, compacts in segments. 2 indexes - offset index and time index."
    },
    {
      "id": 91,
      "question": "What is value.serializer?",
      "answer": "Producer setting, required. Class name of class that will serialize, like StringSerializer."
    },
    {
      "id": 92,
      "question": "What is --under-replicated-partitions?",
      "answer": "Refers to follows that are not in-sync with leader. Zookeeper option."
    },
    {
      "id": 93,
      "question": "What is processing.guarantee?",
      "answer": "Streams app setting for at_least_once or exactly_once."
    },
    {
      "id": 94,
      "question": "What is Client Authorization?",
      "answer": "Authorize authenticated clients to read or write to/from topics. ACLS."
    },
    {
      "id": 95,
      "question": "What is linger.ms?",
      "answer": "Time to wait for messages to batch together. Make large for high throughput. Make small for low latency. Producer setting."
    },
    {
      "id": 96,
      "question": "What is a Persistent Query?",
      "answer": "In KSQL, create stream or create table. Read and write to kakfa topics. Results in new streams and tables that persist."
    },
    {
      "id": 97,
      "question": "What is Schema Registry?",
      "answer": "Define schemas for kets and values on topics. Prevent backwards incompatible chagnes. Automatically handles schema changes. Avro, protobuf, and JSON."
    },
    {
      "id": 98,
      "question": "What is _schemas?",
      "answer": "Special topic for storing schemas."
    },
    {
      "id": 99,
      "question": "What is bootstrap.servers?",
      "answer": "Comma separated list of broker hostnames in the cluster."
    },
    {
      "id": 100,
      "question": "What is max.poll.records?",
      "answer": "Max number of records to return in a single poll. Reduces poll interval. Reduces impact of consumer rebalancing."
    },
    {
      "id": 101,
      "question": "What is a Non-persistent Query?",
      "answer": "KSQLDB queries like count, join, select are non-persistent. They may read and write to Kafka, but those objects are deleted."
    },
    {
      "id": 102,
      "question": "What is fetch.min.bytes?",
      "answer": "Controls how much data min to read at each fetch. Throughput vs latency. Consumer setting."
    },
    {
      "id": 103,
      "question": "What is a Stream Processor?",
      "answer": "Node in processor topology that transforms records in a stream one record at a time."
    },
    {
      "id": 104,
      "question": "What are Stream-table Joins?",
      "answer": "Inner and left joins only. Non-windowed joins. Only input from left triggers a join."
    },
    {
      "id": 105,
      "question": "What are Standby Replicas?",
      "answer": "Shadow copy of local state store for streams tasks. Faster task recovery."
    },
    {
      "id": 106,
      "question": "What is MQTT?",
      "answer": "Protocol for sending data supported by Kafka. Required MQTT proxy to run. Used for publishing data."
    },
    {
      "id": 107,
      "question": "What is a Processor Topology?",
      "answer": "Graph of stream processors (nodes) connected by steams (edges)."
    },
    {
      "id": 108,
      "question": "What is the Kafka Controller?",
      "answer": "A broker that is responsible for managing the state of partitions and replicas and for performing administrative tasks."
    },
    {
      "id": 109,
      "question": "What is KRaft mode?",
      "answer": "Kafka Raft (KRaft) is the consensus protocol replacing ZooKeeper for metadata management in Kafka, providing a ZooKeeper-less deployment option."
    },
    {
      "id": 110,
      "question": "What is idempotent producer?",
      "answer": "A producer that prevents duplicate messages by assigning each message a sequence number."
    },
    {
      "id": 111,
      "question": "What are the delivery semantics in Kafka?",
      "answer": "The guarantees Kafka provides for message delivery: at-most-once, at-least-once, or exactly-once."
    },
    {
      "id": 112,
      "question": "What is a dead letter queue in Kafka?",
      "answer": "A topic where messages that cannot be processed are sent for later handling or diagnosis."
    },
    {
      "id": 113,
      "question": "What is a KTable?",
      "answer": "A representation of a changelog stream in Kafka Streams, where each record represents an update to a key."
    },
    {
      "id": 114,
      "question": "What is a GlobalKTable?",
      "answer": "Similar to a KTable, but replicated on each instance of a Kafka Streams application for local joins."
    },
    {
      "id": 115,
      "question": "What is the rack awareness feature in Kafka?",
      "answer": "A feature that allows Kafka to distribute replicas across different racks, data centers, or availability"
    },
    {
      "id": 116,
      "question": "What is the ControllerService in KRaft mode?",
      "answer": "The component responsible for managing metadata and handling controller operations in KRaft mode, replacing ZooKeeper's functionality."
    }
  ]
}
